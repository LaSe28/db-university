1. Selezionare tutti gli studenti nati nel 1990 (160)

    SELECT name, surname, date_of_birth  FROM `students`
    WHERE YEAR(date_of_birth) = 1990;

2. Selezionare tutti i corsi che valgono più di 10 crediti (479)

    SELECT name, cfu FROM `courses`
    WHERE cfu > 10;

3. Selezionare tutti gli studenti che hanno più di 30 anni

    SELECT name, surname, FLOOR(DATEDIFF(CURRENT_DATE(), date_of_birth) / (365.25)) as age FROM students
    WHERE DATEDIFF(CURRENT_DATE(), date_of_birth) / (365.25) >= 30;

4. Selezionare tutti i corsi del primo semestre del primo anno di un qualsiasi corso di laurea (286)

    SELECT name, period, year FROM `courses`
    WHERE period LIKE 'I %'AND year = 1;

5. Selezionare tutti gli appelli d'esame che avvengono nel pomeriggio (dopo le 14) del 20/06/2020 (21)

    SELECT location, hour, date FROM exams
    WHERE date LIKE '2020-06-20' AND hour > '13%'; 

6. Selezionare tutti i corsi di laurea magistrale (38)

    SELECT name, level FROM `degrees` 
    WHERE level LIKE 'magistrale';

7. Da quanti dipartimenti è composta l'università? (12)

    SELECT COUNT('id') FROM `departments`;

8. Quanti sono gli insegnanti che non hanno un numero di telefono? (50)

    SELECT COUNT('id') -phone FROM `teachers`
    WHERE phone IS NULL;  



JOIN

1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia

        SELECT students.name as student_name, students.surname as student_surname, degrees.name as degree_name FROM `students`
        INNER JOIN degrees ON degrees.id = students.degree_id
        WHERE degrees.name = 'Corso di Laurea in Economia';

2. Selezionare tutti i Corsi di Laurea del Dipartimento di Neuroscienze

        SELECT departments.name as department_name, degrees.name AS degree_name FROM `degrees`
        INNER JOIN departments ON departments.id = degrees.department_id
        WHERE departments.name = 'Dipartimento di Neuroscienze';

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)

        SELECT teachers.name as teacher_name, teachers.surname as teacher_surname, courses.name as course_name FROM teachers
        INNER JOIN course_teacher ON teachers.id = course_teacher.teacher_id 
        INNER JOIN courses ON course_teacher.course_id = courses.id
        WHERE teachers.id = 44;

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e nome

        SELECT students.name as student_name, students.surname as student_surname, departments.name as department_name FROM degrees   
        INNER JOIN students ON students.degree_id = degrees.id
        INNER JOIN departments on degrees.department_id = departments.id
        ORDER BY students.surname ASC;

5. Selezionare tutti i corsi di laurea con i relativi corsi e inseg

        SELECT degrees.name as name_degree, courses.name as course_name, teachers.name as teacher_name, teachers.surname as teacher_surname FROM degrees
        INNER JOIN courses ON courses.degree_id = degrees.id
        INNER JOIN course_teacher ON course_teacher.course_id = courses.id
        INNER JOIN teachers ON course_teacher.teacher_id = teachers.id;

6. Selezionare tutti i docenti che insegnano nel Dipartimento di Matematica (54)

        SELECT teachers.name as teacher_name, teachers.surname, departments.name as department_name FROM teachers
        INNER JOIN course_teacher ON course_teacher.teacher_id = teachers.id
        INNER JOIN courses ON course_teacher.course_id = courses.id
        INNER JOIN degrees ON courses.degree_id = degrees.id
        INNER JOIN departments ON degrees.department_id = departments.id
        WHERE departments.name = 'Dipartimento di Matematica';

7. BONUS: Selezionare per ogni studente quanti tentativi d’esame ha sostenuto per superare ciascuno dei suoi esami

GROUP BY

1. Contare quanti iscritti ci sono stati ogni anno

        SELECT year(students.enrolment_date), COUNT(*) FROM students
        GROUP BY YEAR(students.enrolment_date);

2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio

        SELECT teachers.office_address, COUNT(*) FROM teachers
        GROUP BY teachers.office_address;

3. Calcolare la media dei voti di ogni appello d'esame

        SELECT ROUND(AVG(exam_student.vote)) FROM `exam_student`
        GROUP BY exam_id;

4. Contare quanti corsi di laurea ci sono per ogni dipartimento

        SELECT COUNT(department_id) FROM degrees
        GROUP BY department_id;